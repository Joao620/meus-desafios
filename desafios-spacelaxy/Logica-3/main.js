/* Generated by the Nim Compiler v2.2.4 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI134217745 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217749 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217751 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555167 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555175 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33554450 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI33555174 = {size: 0, kind: 22, base: null, node: null, finalizer: null};
var NTI33555171 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33555172 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217741 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI134217743 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NNI134217743 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217743.node = NNI134217743;
var NNI134217741 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217741.node = NNI134217741;
var NNI33555172 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555172.node = NNI33555172;
NTI33555174.base = NTI33555171;
NTI33555175.base = NTI33555171;
var NNI33555171 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI33555174, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI33554450, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI33554449, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI33554449, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI33555175, name: "up", sons: null}]};
NTI33555171.node = NNI33555171;
var NNI33555167 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI33555167.node = NNI33555167;
NTI33555171.base = NTI33555167;
NTI33555172.base = NTI33555171;
NTI134217741.base = NTI33555172;
NTI134217743.base = NTI134217741;
var NNI134217751 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217751.node = NNI134217751;
NTI134217751.base = NTI33555172;
var NNI134217749 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217749.node = NNI134217749;
NTI134217749.base = NTI33555172;
var NNI134217745 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI134217745.node = NNI134217745;
NTI134217745.base = NTI33555172;

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_p0, src_p1, ti_p2) {
  var result_33557330 = null;

    switch (ti_p2.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer__system_u2878(ti_p2))) {
      result_33557330 = src_p1;
      }
      else {
        result_33557330 = [src_p1[0], src_p1[1]];
      }
      
      break;
    case 19:
            if (dest_p0 === null || dest_p0 === undefined) {
        dest_p0 = {};
      }
      else {
        for (var key in dest_p0) { delete dest_p0[key]; }
      }
      for (var key in src_p1) { dest_p0[key] = src_p1[key]; }
      result_33557330 = dest_p0;
    
      break;
    case 18:
    case 17:
      if (!((ti_p2.base == null))) {
      result_33557330 = nimCopy(dest_p0, src_p1, ti_p2.base);
      }
      else {
      if ((ti_p2.kind == 17)) {
      result_33557330 = (dest_p0 === null || dest_p0 === undefined) ? {m_type: ti_p2} : dest_p0;
      }
      else {
        result_33557330 = (dest_p0 === null || dest_p0 === undefined) ? {} : dest_p0;
      }
      }
      nimCopyAux(result_33557330, src_p1, ti_p2.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_p1)) { 
        if(dest_p0 === null || dest_p0 === undefined || dest_p0.length != src_p1.length) {
          dest_p0 = new src_p1.constructor(src_p1);
        } else {
          dest_p0.set(src_p1, 0);
        }
        result_33557330 = dest_p0;
      } else {
        if (src_p1 === null) {
          result_33557330 = null;
        }
        else {
          if (dest_p0 === null || dest_p0 === undefined || dest_p0.length != src_p1.length) {
            dest_p0 = new Array(src_p1.length);
          }
          result_33557330 = dest_p0;
          for (var i = 0; i < src_p1.length; ++i) {
            result_33557330[i] = nimCopy(result_33557330[i], src_p1[i], ti_p2.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_p1 === null) {
        result_33557330 = null;
      }
      else {
        if (dest_p0 === null || dest_p0 === undefined || dest_p0.length != src_p1.length) {
          dest_p0 = new Array(src_p1.length);
        }
        result_33557330 = dest_p0;
        for (var i = 0; i < src_p1.length; ++i) {
          result_33557330[i] = nimCopy(result_33557330[i], src_p1[i], ti_p2.base);
        }
      }
    
      break;
    case 28:
            if (src_p1 !== null) {
        result_33557330 = src_p1.slice(0);
      }
    
      break;
    default: 
      result_33557330 = src_p1;
      break;
    }

  return result_33557330;

}

function mnewString(len_p0) {
        var result = new Array(len_p0);
    for (var i = 0; i < len_p0; i++) {result[i] = 0;}
    return result;
  

  
}

function isObj(obj_p0, subclass_p1) {
  var result_33557443 = false;

  BeforeRet: {
    var x_33557444 = obj_p0;
    if ((x_33557444 == subclass_p1)) {
    result_33557443 = true;
    break BeforeRet;
    }
    
    Label1: {
        Label2: while (true) {
        if (!!((x_33557444 == subclass_p1))) break Label2;
          if ((x_33557444 == null)) {
          result_33557443 = false;
          break BeforeRet;
          }
          
          x_33557444 = x_33557444.base;
        }
    };
    result_33557443 = true;
    break BeforeRet;
  };

  return result_33557443;

}

function toJSStr(s_p0) {
  var result_33556919 = null;

    var res_33556973 = newSeq__system_u2516((s_p0).length);
    var i_33556974 = 0;
    var j_33556975 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556974 < (s_p0).length)) break Label2;
          var c_33556976 = s_p0[i_33556974];
          if ((c_33556976 < 128)) {
          res_33556973[j_33556975] = String.fromCharCode(c_33556976);
          i_33556974 += 1;
          }
          else {
            var helper_33557002 = newSeq__system_u2516(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33557003 = c_33556976.toString(16);
                  if ((((code_33557003) == null ? 0 : (code_33557003).length) == 1)) {
                  helper_33557002.push("%0");;
                  }
                  else {
                  helper_33557002.push("%");;
                  }
                  
                  helper_33557002.push(code_33557003);;
                  i_33556974 += 1;
                  if ((((s_p0).length <= i_33556974) || (s_p0[i_33556974] < 128))) {
                  break Label3;
                  }
                  
                  c_33556976 = s_p0[i_33556974];
                }
            };
++excHandler;
            try {
            res_33556973[j_33556975] = decodeURIComponent(helper_33557002.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            raiseDefect();
            res_33556973[j_33556975] = helper_33557002.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556975 += 1;
        }
    };
    if (res_33556973.length < j_33556975) { for (var i = res_33556973.length ; i < j_33556975 ; ++i) res_33556973.push(null); }
               else { res_33556973.length = j_33556975; };
    result_33556919 = res_33556973.join("");

  return result_33556919;

}

function raiseException(e_p0, ename_p1) {
    e_p0.name = ename_p1;
    if ((excHandler == 0)) {
    unhandledException(e_p0);
    }
    
    throw e_p0;

  
}

function addInt(a_p0, b_p1) {
        var result = a_p0 + b_p1;
    checkOverflowInt(result);
    return result;
  

  
}

function chckRange(i_p0, a_p1, b_p2) {
  var result_33557370 = 0;

  BeforeRet: {
    if (((a_p1 <= i_p0) && (i_p0 <= b_p2))) {
    result_33557370 = i_p0;
    break BeforeRet;
    }
    else {
    raiseRangeError();
    }
    
  };

  return result_33557370;

}

function chckIndx(i_p0, a_p1, b_p2) {
  var result_33557365 = 0;

  BeforeRet: {
    if (((a_p1 <= i_p0) && (i_p0 <= b_p2))) {
    result_33557365 = i_p0;
    break BeforeRet;
    }
    else {
    raiseIndexError(i_p0, a_p1, b_p2);
    }
    
  };

  return result_33557365;

}

function makeNimstrLit(c_p0) {
      var result = [];
  for (var i = 0; i < c_p0.length; ++i) {
    result[i] = c_p0.charCodeAt(i);
  }
  return result;
  

  
}

function subInt(a_p0, b_p1) {
        var result = a_p0 - b_p1;
    checkOverflowInt(result);
    return result;
  

  
}
var objectID_788529330 = [0];

function isFatPointer__system_u2878(ti_p0) {
  var result_33557312 = false;

  BeforeRet: {
    result_33557312 = !((ConstSet1[ti_p0.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557312;

}

function nimCopyAux(dest_p0, src_p1, n_p2) {
    switch (n_p2.kind) {
    case 0:
      break;
    case 1:
            dest_p0[n_p2.offset] = nimCopy(dest_p0[n_p2.offset], src_p1[n_p2.offset], n_p2.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_p2.sons.length; i++) {
      nimCopyAux(dest_p0, src_p1, n_p2.sons[i]);
    }
    
      break;
    case 3:
            dest_p0[n_p2.offset] = nimCopy(dest_p0[n_p2.offset], src_p1[n_p2.offset], n_p2.typ);
      for (var i = 0; i < n_p2.sons.length; ++i) {
        nimCopyAux(dest_p0, src_p1, n_p2.sons[i][1]);
      }
    
      break;
    }

  
}

function add__system_u1942(x_p0, x_p0_Idx, y_p1) {
          if (x_p0[x_p0_Idx] === null) { x_p0[x_p0_Idx] = []; }
      var off = x_p0[x_p0_Idx].length;
      x_p0[x_p0_Idx].length += y_p1.length;
      for (var i = 0; i < y_p1.length; ++i) {
        x_p0[x_p0_Idx][off+i] = y_p1.charCodeAt(i);
      }
    

  
}

function newSeq__system_u2516(len_p0) {
  var result_33556952 = [];

    result_33556952 = new Array(len_p0); for (var i = 0 ; i < len_p0 ; ++i) { result_33556952[i] = null; }
  return result_33556952;

}

function isNimException__system_u2017() {
    return lastJSError && lastJSError.m_type;

  
}

function getCurrentException() {
  var result_33556452 = null;

    if (isNimException__system_u2017()) {
    result_33556452 = lastJSError;
    }
    

  return result_33556452;

}

function raiseDefect() {
    if (isNimException__system_u2017()) {
    var e_33556664 = getCurrentException();
    if (isObj(e_33556664.m_type, NTI33555172)) {
    if ((excHandler == 0)) {
    unhandledException(e_33556664);
    }
    
    throw e_33556664;
    }
    
    }
    

  
}

function unhandledException(e_p0) {
    var buf_33556658 = [[]];
    if (!(((e_p0.message).length == 0))) {
    buf_33556658[0].push.apply(buf_33556658[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110,58,32]);;
    buf_33556658[0].push.apply(buf_33556658[0], e_p0.message);;
    }
    else {
    buf_33556658[0].push.apply(buf_33556658[0], [69,114,114,111,114,58,32,117,110,104,97,110,100,108,101,100,32,101,120,99,101,112,116,105,111,110]);;
    }
    
    buf_33556658[0].push.apply(buf_33556658[0], [32,91]);;
    add__system_u1942(buf_33556658, 0, e_p0.name);
    buf_33556658[0].push.apply(buf_33556658[0], [93,10]);;
    var cbuf_33556659 = toJSStr(buf_33556658[0]);
      if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_33556659);
  }
  else {
    throw cbuf_33556659;
  }
  

  
}

function raiseOverflow() {
    raiseException({message: [111,118,101,114,45,32,111,114,32,117,110,100,101,114,102,108,111,119], parent: null, m_type: NTI134217743, name: null, trace: [], up: null}, "OverflowDefect");

  
}

function checkOverflowInt(a_p0) {
        if (a_p0 > 2147483647 || a_p0 < -2147483648) raiseOverflow();
  

  
}

function raiseRangeError() {
    raiseException({message: [118,97,108,117,101,32,111,117,116,32,111,102,32,114,97,110,103,101], parent: null, m_type: NTI134217751, name: null, trace: [], up: null}, "RangeDefect");

  
}

function addChars__stdZprivateZdigitsutils_u202(result_p0, result_p0_Idx, x_p1, start_p2, n_p3) {
    var Temporary1;

    var old_301990096 = (result_p0[result_p0_Idx]).length;
    if (result_p0[result_p0_Idx].length < (Temporary1 = chckRange(addInt(old_301990096, n_p3), 0, 2147483647), Temporary1)) { for (var i = result_p0[result_p0_Idx].length; i < Temporary1; ++i) result_p0[result_p0_Idx].push(0); }
         else {result_p0[result_p0_Idx].length = Temporary1; };
    Label2: {
      var iHEX60gensym4_301990110 = 0;
      var i_553648331 = 0;
      Label3: {
          Label4: while (true) {
          if (!(i_553648331 < n_p3)) break Label4;
            iHEX60gensym4_301990110 = i_553648331;
            result_p0[result_p0_Idx][chckIndx(addInt(old_301990096, iHEX60gensym4_301990110), 0, (result_p0[result_p0_Idx]).length - 1)] = x_p1.charCodeAt(chckIndx(addInt(start_p2, iHEX60gensym4_301990110), 0, (x_p1).length - 1));
            i_553648331 = addInt(i_553648331, 1);
          }
      };
    };

  
}

function addChars__stdZprivateZdigitsutils_u198(result_p0, result_p0_Idx, x_p1) {
    addChars__stdZprivateZdigitsutils_u202(result_p0, result_p0_Idx, x_p1, 0, ((x_p1) == null ? 0 : (x_p1).length));

  
}

function addInt__stdZprivateZdigitsutils_u223(result_p0, result_p0_Idx, x_p1) {
    addChars__stdZprivateZdigitsutils_u198(result_p0, result_p0_Idx, ((x_p1) + ""));

  
}

function addInt__stdZprivateZdigitsutils_u241(result_p0, result_p0_Idx, x_p1) {
    addInt__stdZprivateZdigitsutils_u223(result_p0, result_p0_Idx, BigInt(x_p1));

  
}

function HEX24__systemZdollars_u14(xHEX60gensym0_p0) {
  var result_385875984 = [[]];

    result_385875984[0] = nimCopy(null, [], NTI33554449);
    addInt__stdZprivateZdigitsutils_u241(result_385875984, 0, xHEX60gensym0_p0);

  return result_385875984[0];

}

function raiseIndexError(i_p0, a_p1, b_p2) {
    var Temporary1;

    if ((b_p2 < a_p1)) {
    Temporary1 = [105,110,100,101,120,32,111,117,116,32,111,102,32,98,111,117,110,100,115,44,32,116,104,101,32,99,111,110,116,97,105,110,101,114,32,105,115,32,101,109,112,116,121];
    }
    else {
    Temporary1 = ([105,110,100,101,120,32]).concat(HEX24__systemZdollars_u14(i_p0),[32,110,111,116,32,105,110,32],HEX24__systemZdollars_u14(a_p1),[32,46,46,32],HEX24__systemZdollars_u14(b_p2));
    }
    
    raiseException({message: nimCopy(null, Temporary1, NTI33554449), parent: null, m_type: NTI134217749, name: null, trace: [], up: null}, "IndexDefect");

  
}

function sysFatal__stdZassertions_u44(message_p1) {
    raiseException({message: nimCopy(null, message_p1, NTI33554449), m_type: NTI134217745, parent: null, name: null, trace: [], up: null}, "AssertionDefect");

  
}

function raiseAssert__stdZassertions_u42(msg_p0) {
    sysFatal__stdZassertions_u44(msg_p0);

  
}

function failedAssertImpl__stdZassertions_u84(msg_p0) {
    raiseAssert__stdZassertions_u42(msg_p0);

  
}

function toFloat__system_u1572(i_p0) {
  var result_33556006 = 0.0;

    result_33556006 = i_p0;

  return result_33556006;

}

function HEX2F__system_u1584(x_p0, y_p1) {
  var result_33556019 = 0.0;

    result_33556019 = (toFloat__system_u1572(x_p0) / toFloat__system_u1572(y_p1));

  return result_33556019;

}

function media__main_u22(lista_p0) {
  var result_553648152 = 0;

  BeforeRet: {
    if (((lista_p0).length == 0)) {
    result_553648152 = 0;
    break BeforeRet;
    }
    
    var sum_553648157 = 0;
    Label1: {
      var num_553648179 = 0;
      var i_553648338 = 0;
      var L_553648339 = (lista_p0).length;
      Label2: {
          Label3: while (true) {
          if (!(i_553648338 < L_553648339)) break Label3;
            num_553648179 = lista_p0[chckIndx(i_553648338, 0, (lista_p0).length - 1)];
            sum_553648157 = addInt(sum_553648157, num_553648179);
            i_553648338 += 1;
            if (!(((lista_p0).length == L_553648339))) {
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    result_553648152 = Math.floor(HEX2F__system_u1584(sum_553648157, (lista_p0).length));
    break BeforeRet;
  };

  return result_553648152;

}

function viva__main_u95(celula_p0) {
  var result_553648225 = false;

  BeforeRet: {
    result_553648225 = ((((50 < celula_p0.temperatura) && (40 < celula_p0.pressao)) && (70 < celula_p0.atividadeBiologica)) && (10 < media__main_u22(celula_p0.pulsosEnergeticos)));
    break BeforeRet;
  };

  return result_553648225;

}

function nivelRisco__main_u98(lista_p0) {
  var result_553648228 = 0;

  BeforeRet: {
    var ultimoPulso_553648229 = lista_p0[chckIndx(0, 0, (lista_p0).length - 1)];
    var ultimaDiferenca_553648230 = 0;
    Label1: {
      var pulso_553648234 = 0;
      var i_553648342 = 0;
      var L_553648343 = (lista_p0).length;
      Label2: {
          Label3: while (true) {
          if (!(i_553648342 < L_553648343)) break Label3;
            pulso_553648234 = lista_p0[chckIndx(i_553648342, 0, (lista_p0).length - 1)];
            var diferenca_553648235 = subInt(pulso_553648234, ultimoPulso_553648229);
            if ((15 <= diferenca_553648235)) {
            result_553648228 = 0;
            break BeforeRet;
            }
            else {
            if ((diferenca_553648235 < ultimaDiferenca_553648230)) {
            result_553648228 = 2;
            break BeforeRet;
            }
            }
            ultimaDiferenca_553648230 = diferenca_553648235;
            ultimoPulso_553648229 = pulso_553648234;
            i_553648342 += 1;
            if (!(((lista_p0).length == L_553648343))) {
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };
    result_553648228 = 1;
    break BeforeRet;
  };

  return result_553648228;

}

function analisar(celulas_p0) {
  var result_553648254 = ({total: 0, niveis: [[], [], []], descartadas: []});

    result_553648254.total = (celulas_p0).length;
    Label1: {
      var umaCelula_553648280 = ({id: null, temperatura: 0, pressao: 0, atividadeBiologica: 0, pulsosEnergeticos: []});
      var i_553648324 = 0;
      var L_553648325 = (celulas_p0).length;
      Label2: {
          Label3: while (true) {
          if (!(i_553648324 < L_553648325)) break Label3;
            umaCelula_553648280 = celulas_p0[chckIndx(i_553648324, 0, (celulas_p0).length - 1)];
            if (viva__main_u95(umaCelula_553648280)) {
            var risco_553648281 = nivelRisco__main_u98(umaCelula_553648280.pulsosEnergeticos);
            result_553648254.niveis[chckIndx(risco_553648281, 0, (result_553648254.niveis).length - 1)].push(umaCelula_553648280.id);;
            }
            else {
            result_553648254.descartadas.push(umaCelula_553648280.id);;
            }
            
            i_553648324 += 1;
            if (!(((celulas_p0).length == L_553648325))) {
            failedAssertImpl__stdZassertions_u84(makeNimstrLit("iterators.nim(254, 11) `len(a) == L` the length of the seq changed while iterating over it"));
            }
            
          }
      };
    };

  return result_553648254;

}
